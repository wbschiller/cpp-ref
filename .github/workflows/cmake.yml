name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
 
  build:
    runs-on: ubuntu-latest
    container: ghcr.io/wbschiller/cpp-ref-build:latest
      # image: ghcr.io/wbschiller/cpp-ref-build:latest
      # credentials:
      #   username: ${{ github.actor }}
      #   password: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout 
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --test-dir ${{github.workspace}}/build -C ${{env.BUILD_TYPE}}
      
  checker:
    runs-on: ubuntu-latest
    container: ghcr.io/wbschiller/cpp-ref-build:latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build-checker -DCPPREF_ENABLE_TIDY=yes -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Clang-Format
      run: cmake --build ${{github.workspace}}/build-checker --target clangformat --config ${{env.BUILD_TYPE}}

    - name: Clang-Tidy
      run: cmake --build ${{github.workspace}}/build-checker --config ${{env.BUILD_TYPE}}
